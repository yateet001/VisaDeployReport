trigger: none

pool:
  vmImage: 'windows-latest'

variables:
  artifact_path: '$(Build.ArtifactStagingDirectory)'
  config_file: 'Config/config.json'
  deployment_profile_dev: 'Configuration/Dev/DEPLOYMENT_PROFILE.csv'
  deployment_profile_prod: 'Configuration/Prod/DEPLOYMENT_PROFILE.csv'
  output_folder: 'OutputLogs'

parameters:
  - name: Deployment_Environment
    displayName: "Deployment Environment"
    type: string
    default: "Dev"
    values:
      - "Dev"
      - "Prod"

  - name: Environment_Type
    displayName: "Environment Type"
    type: string
    default: "Primary"
    values:
      - "Primary"
      - "Secondary"

  - name: Run_Operations
    displayName: "Deploy Operations Dashboard"
    type: boolean
    default: true

  - name: Run_Semantic_Model
    displayName: "Deploy Semantic Models"
    type: boolean
    default: true

  - name: Skip_Validation
    displayName: "Skip Pre-deployment Validation"
    type: boolean
    default: false

stages:
  # Approval Stage
  - stage: Approval_Stage
    jobs:
      - deployment: Approval
        environment: UDP-${{ parameters.Deployment_Environment }}-Deploy
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "Approval Stage: All good to proceed"

  # Deployment Stage (PBIP Report Deployment)
  - stage: DeployPBIPToWorkspace
    displayName: "Deploy Power BI PBIP Reports"
    jobs:
      - job: DeployPowerBIReports
        displayName: "Deploy PBIP Reports"
        timeoutInMinutes: 360
        pool:
          vmImage: 'windows-latest'
        steps:

          # Step 1: Verify file structure
          - task: PowerShell@2
            displayName: 'Verify File Structure'
            inputs:
              targetType: inline
              script: |
                Write-Host "=== File Structure Verification ===" -ForegroundColor Cyan
                Write-Host "Build.SourcesDirectory: $(Build.SourcesDirectory)"
                
                # List key directories and files
                $paths = @(
                  "Scripts/MainOrchestrator.ps1",
                  "Scripts/PBI-Deployment-Utilities.ps1", 
                  "Scripts/Token-Utilities.ps1",
                  "Config/config.json",
                  "Configuration/${{ parameters.Deployment_Environment }}/DEPLOYMENT_PROFILE.csv"
                )
                
                foreach ($path in $paths) {
                  $fullPath = Join-Path "$(Build.SourcesDirectory)" $path
                  if (Test-Path $fullPath) {
                    Write-Host "✓ Found: $path" -ForegroundColor Green
                  } else {
                    Write-Host "✗ Missing: $path" -ForegroundColor Red
                  }
                }

          # Step 2: Create Output Directory
          - task: PowerShell@2
            displayName: 'Create Output Directory'
            inputs:
              targetType: inline
              script: |
                $outputPath = "$(Build.SourcesDirectory)/$(output_folder)"
                if (!(Test-Path $outputPath)) {
                    New-Item -Path $outputPath -ItemType Directory -Force
                }
                Write-Host "Output directory created: $outputPath"

          # Step 3: Validate configuration (optional)
          - task: PowerShell@2
            displayName: 'Pre-deployment Validation'
            condition: eq('${{ parameters.Skip_Validation }}', false)
            inputs:
              targetType: inline
              script: |
                Write-Host "=== Pre-deployment Validation ===" -ForegroundColor Cyan
                
                # Test if we can load the orchestrator with validation
                try {
                  & "$(Build.SourcesDirectory)/Scripts/MainOrchestrator.ps1" `
                    -Environment "${{ parameters.Deployment_Environment }}" `
                    -ConfigFile "$(config_file)" `
                    -WhatIf `
                    -ErrorAction Stop 2>&1 | Out-Null
                  
                  Write-Host "✓ Configuration validation passed" -ForegroundColor Green
                }
                catch {
                  # Run just the validation part
                  Write-Host "Running standalone validation..." -ForegroundColor Yellow
                  
                  $configPath = "$(Build.SourcesDirectory)/$(config_file)"
                  $profilePath = "$(Build.SourcesDirectory)/Configuration/${{ parameters.Deployment_Environment }}/DEPLOYMENT_PROFILE.csv"
                  
                  if (Test-Path $configPath) {
                    Write-Host "✓ Config file exists" -ForegroundColor Green
                  } else {
                    throw "Config file not found: $configPath"
                  }
                  
                  if (Test-Path $profilePath) {
                    Write-Host "✓ Deployment profile exists" -ForegroundColor Green
                    $profile = Import-Csv $profilePath
                    Write-Host "✓ Found $($profile.Count) deployment profiles" -ForegroundColor Green
                  } else {
                    throw "Deployment profile not found: $profilePath"
                  }
                }

          # Step 4: Run Main PBIP Deployment Script with correct parameters
          - task: PowerShell@2
            displayName: "Deploy PBIP Reports to Power BI"
            inputs:
              filePath: 'Scripts/MainOrchestrator.ps1'
              arguments: >
                -Environment "${{ parameters.Deployment_Environment }}" 
                -ConfigFile "$(config_file)"
                ${{ eq(parameters.Skip_Validation, true) && '-SkipValidation' || '' }}
              pwsh: true
              workingDirectory: '$(Build.SourcesDirectory)'

          # Step 5: Publish deployment logs as artifacts (if they exist)
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Deployment Logs'
            condition: always()
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/$(output_folder)'
              ArtifactName: 'PowerBI-Deployment-Logs'
              publishLocation: 'Container'